; initial high-level patterns (HLP).
; abstraction is fully automatic: HLPs are built from examples.
; caveat: the provided examples will be patched. Do not refer to ontological entities here (however, ont are safe).


; self_hand_position[H P T]:[(H e hand)T,(H b self)T,(H p P)T]

self_hand:(ent 1) |[]

self_hand_is_a_hand:(mk.val self_hand essence hand 1) |[]
f_self_hand_is_a_hand:(fact self_hand_is_a_hand 0us 1 1) |[]

self_hand_belongs_to_self:(mk.val self_hand part_of self 1) |[]
f_self_hand_belongs_to_self:(fact self_hand_belongs_to_self 0us 1 1) |[]

self_hand_pos:(mk.val self_hand position (vec3 0 0 0) 1) |[]
f_self_hand_pos:(fact self_hand_pos 0us 1 1) |[]

self_hand_position:(cst [f_self_hand_is_a_hand f_self_hand_belongs_to_self f_self_hand_pos] [stdin] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; move_hand_[H Ptarget Ttarget Tinit]:[(move_hand H Ptarget Ttarget)Tinit->i_self_hand_position[H Ptarget Ttarget]]

cmd_move:(cmd move_hand [self_hand (vec3 0 0 0) 100000us] 1) |[]
f_cmd_move:(fact cmd_move 0us 1 1) |[]

a_self_hand_pos:(icst self_hand_position [self_hand (vec3 0 0 0) 100000us] 1) |[]
f_a_self_hand_pos:(fact a_self_hand_pos 100000us 1 1) |[]

move_hand_:(mdl [f_cmd_move f_a_self_hand_pos] [stdin] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; same_position



; move



; link



; attach



; grab



; grab req



; move_hand_req_


